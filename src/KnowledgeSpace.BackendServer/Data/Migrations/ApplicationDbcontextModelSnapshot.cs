// <auto-generated />
using System;
using KnowledgeSpace.BackendServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KnowledgeSpace.BackendServer.Data.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    partial class ApplicationDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("KnowledgeBaseSequence");

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<int>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeBaseId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Command", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Commands");

                    b.HasData(
                        new
                        {
                            Id = "VIEW",
                            Name = "Xem"
                        },
                        new
                        {
                            Id = "CREATE",
                            Name = "Thêm"
                        },
                        new
                        {
                            Id = "UPDATE",
                            Name = "Sửa"
                        },
                        new
                        {
                            Id = "DELETE",
                            Name = "Xoá"
                        },
                        new
                        {
                            Id = "APPROVE",
                            Name = "Duyệt"
                        });
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.CommandInFunction", b =>
                {
                    b.Property<string>("CommandId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FunctionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CommandId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.ToTable("CommandInFunctions");

                    b.HasData(
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "CONTENT"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "CONTENT"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "CONTENT"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "CONTENT"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "CONTENT_CATEGORY"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "CONTENT_CATEGORY"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "CONTENT_CATEGORY"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "CONTENT_CATEGORY"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "CONTENT_KNOWLEDGEBASE"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "CONTENT_KNOWLEDGEBASE"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "CONTENT_KNOWLEDGEBASE"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "CONTENT_KNOWLEDGEBASE"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "CONTENT_COMMENT"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "CONTENT_COMMENT"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "CONTENT_COMMENT"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "CONTENT_COMMENT"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "CONTENT_REPORT"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "CONTENT_REPORT"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "CONTENT_REPORT"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "CONTENT_REPORT"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "STATISTIC"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "STATISTIC"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "STATISTIC"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "STATISTIC"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "STATISTIC_MONTHLY_NEWKB"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "STATISTIC_MONTHLY_NEWKB"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "STATISTIC_MONTHLY_NEWKB"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "STATISTIC_MONTHLY_NEWKB"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "STATISTIC_MONTHLY_COMMENT"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "STATISTIC_MONTHLY_COMMENT"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "STATISTIC_MONTHLY_COMMENT"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "STATISTIC_MONTHLY_COMMENT"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_PERMISSION"
                        });
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerUserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeBaseId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = "DASHBOARD",
                            Icon = "fa-dashboard",
                            Name = "Bảng điều khiển",
                            SortOrder = 0,
                            Url = "/dashboard"
                        },
                        new
                        {
                            Id = "CONTENT",
                            Icon = "fa-table",
                            Name = "Nội dung",
                            SortOrder = 0,
                            Url = "/contents"
                        },
                        new
                        {
                            Id = "CONTENT_CATEGORY",
                            Name = "Danh mục",
                            ParentId = "CONTENT",
                            SortOrder = 1,
                            Url = "/contents/categories"
                        },
                        new
                        {
                            Id = "CONTENT_KNOWLEDGEBASE",
                            Icon = "fa-edit",
                            Name = "Bài viết",
                            ParentId = "CONTENT",
                            SortOrder = 2,
                            Url = "/contents/knowledge-bases"
                        },
                        new
                        {
                            Id = "CONTENT_COMMENT",
                            Icon = "fa-edit",
                            Name = "Bình luận",
                            ParentId = "CONTENT",
                            SortOrder = 3,
                            Url = "/contents/knowledge-bases/comments"
                        },
                        new
                        {
                            Id = "CONTENT_REPORT",
                            Icon = "fa-edit",
                            Name = "Báo xấu",
                            ParentId = "CONTENT",
                            SortOrder = 4,
                            Url = "/contents/knowledge-bases/reports"
                        },
                        new
                        {
                            Id = "STATISTIC",
                            Icon = "fa-bar-chart-o",
                            Name = "Thống kê",
                            SortOrder = 0,
                            Url = "/statistics"
                        },
                        new
                        {
                            Id = "STATISTIC_MONTHLY_NEWMEMBER",
                            Icon = "fa-wrench",
                            Name = "Đăng ký từng tháng",
                            ParentId = "STATISTIC",
                            SortOrder = 1,
                            Url = "/statistics/monthly-registers"
                        },
                        new
                        {
                            Id = "STATISTIC_MONTHLY_NEWKB",
                            Icon = "fa-wrench",
                            Name = "Bài đăng hàng tháng",
                            ParentId = "STATISTIC",
                            SortOrder = 2,
                            Url = "/statistics/monthly-newkbs"
                        },
                        new
                        {
                            Id = "STATISTIC_MONTHLY_COMMENT",
                            Icon = "fa-wrench",
                            Name = "Comment theo tháng",
                            ParentId = "STATISTIC",
                            SortOrder = 3,
                            Url = "/statistics/monthly-comments"
                        },
                        new
                        {
                            Id = "SYSTEM",
                            Icon = "fa-th-list",
                            Name = "Hệ thống",
                            SortOrder = 0,
                            Url = "/systems"
                        },
                        new
                        {
                            Id = "SYSTEM_USER",
                            Icon = "fa-desktop",
                            Name = "Người dùng",
                            ParentId = "SYSTEM",
                            SortOrder = 1,
                            Url = "/systems/users"
                        },
                        new
                        {
                            Id = "SYSTEM_ROLE",
                            Icon = "fa-desktop",
                            Name = "Nhóm quyền",
                            ParentId = "SYSTEM",
                            SortOrder = 2,
                            Url = "/systems/roles"
                        },
                        new
                        {
                            Id = "SYSTEM_FUNCTION",
                            Icon = "fa-desktop",
                            Name = "Chức năng",
                            ParentId = "SYSTEM",
                            SortOrder = 3,
                            Url = "/systems/functions"
                        },
                        new
                        {
                            Id = "SYSTEM_PERMISSION",
                            Icon = "fa-desktop",
                            Name = "Quyền hạn",
                            ParentId = "SYSTEM",
                            SortOrder = 4,
                            Url = "/systems/permissions"
                        });
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Labels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfComments")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfReports")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfVotes")
                        .HasColumnType("int");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("StepToReproduce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.Property<string>("Workaround")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("KnowledgeBases");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Label", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.LabelInKnowledgeBase", b =>
                {
                    b.Property<int>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<string>("LabelId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("KnowledgeBaseId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelInKnowledgeBases");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Permission", b =>
                {
                    b.Property<string>("FunctionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CommandId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FunctionId", "CommandId", "RoleId");

                    b.HasIndex("CommandId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            FunctionId = "DASHBOARD",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "DASHBOARD",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "DASHBOARD",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "DASHBOARD",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_CATEGORY",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_CATEGORY",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_CATEGORY",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_CATEGORY",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_KNOWLEDGEBASE",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_KNOWLEDGEBASE",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_KNOWLEDGEBASE",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_KNOWLEDGEBASE",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_COMMENT",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_COMMENT",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_COMMENT",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_COMMENT",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_REPORT",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_REPORT",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_REPORT",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "CONTENT_REPORT",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWMEMBER",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWKB",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWKB",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWKB",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_NEWKB",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_COMMENT",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_COMMENT",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_COMMENT",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "STATISTIC_MONTHLY_COMMENT",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_USER",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_USER",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_USER",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_USER",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_ROLE",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_ROLE",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_ROLE",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_ROLE",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_FUNCTION",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_FUNCTION",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_FUNCTION",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_FUNCTION",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_PERMISSION",
                            CommandId = "VIEW",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_PERMISSION",
                            CommandId = "CREATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_PERMISSION",
                            CommandId = "UPDATE",
                            RoleId = "Admin"
                        },
                        new
                        {
                            FunctionId = "SYSTEM_PERMISSION",
                            CommandId = "DELETE",
                            RoleId = "Admin"
                        });
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<int>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeBaseId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Member",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("NumberOfKnowledgeBases")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfReports")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfVotes")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "84a9475e-2c1e-4a36-b4a2-1b93920944e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bb7c77c-2517-44c8-b57c-ec7e830141b0",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khanhhuynh912@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Quản trị",
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAELqBlIdhae4Rvx/drbTHf3n0TkUsp+4WwGmIvxN4bumy4kWinXlwDb0ACX6/Yw1r5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "daf2bc8b-4a1f-4843-87c8-61b1497e75d2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Vote", b =>
                {
                    b.Property<int>("KnowledgeBaseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("KnowledgeBaseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "84a9475e-2c1e-4a36-b4a2-1b93920944e2",
                            RoleId = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.ActivityLog", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Attachment", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", "KnowledgeBase")
                        .WithMany("Attachments")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeBase");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.CommandInFunction", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Command", "Command")
                        .WithMany("CommandInFunctions")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Function", "Function")
                        .WithMany("CommandInFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Comment", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", "KnowledgeBase")
                        .WithMany("Comments")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeBase");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Category", "Category")
                        .WithMany("KnowledgeBases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.LabelInKnowledgeBase", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", "KnowledgeBase")
                        .WithMany("LabelInKnowledgeBases")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Label", "Label")
                        .WithMany("LabelInKnowledgeBases")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeBase");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Permission", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Command", "Command")
                        .WithMany("Permissions")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Function", "Function")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");

                    b.Navigation("Function");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Report", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", "KnowledgeBase")
                        .WithMany("Reports")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeBase");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Vote", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", "KnowledgeBase")
                        .WithMany("Votes")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeBase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KnowledgeSpace.BackendServer.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Category", b =>
                {
                    b.Navigation("KnowledgeBases");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Command", b =>
                {
                    b.Navigation("CommandInFunctions");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Function", b =>
                {
                    b.Navigation("CommandInFunctions");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.KnowledgeBase", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("LabelInKnowledgeBases");

                    b.Navigation("Reports");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Label", b =>
                {
                    b.Navigation("LabelInKnowledgeBases");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("KnowledgeSpace.BackendServer.Data.Entities.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
